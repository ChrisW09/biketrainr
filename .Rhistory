global$update_from_hr <- FALSE
})
observeEvent(input$dygraph_date_window, {
print("GOOOOOOO")
global$update_from_hr <- TRUE
})
output$trackmap = renderLeaflet({
global$heart_range
print("HEEERE")
isolate({
global$track <- track_raw[global$heart_range, ]
lon <- global$track$lon %>% range
lat <- global$track$lat %>% range
m <- leaflet() %>% addTiles()
m %>% fitBounds(lon[1], lat[1], lon[2], lat[2]) %>%
addPolylines(data = global$track, lng = ~lon, lat = ~lat)
})
})
output$dygraph <- renderDygraph({
print(global$keep_time)
isolate({
global$track <- track_raw[global$keep_time, ]
global$track$speed %<>% as.numeric
df <- data.frame(x = global$track$time, y = global$track$speed)
qxts <- xts(as.numeric(global$track[, 6]), order.by = global$track$time)
dygraph(qxts, main = "Predicted Deaths/Month") %>%
dyLimit(hr_lit[1], color = "blue") %>%
dyLimit(hr_lit[2], color = "blue") %>%
dyLimit(hr_lit[3], color = "blue") %>%
#dySeries(c("lwr", "fit", "upr"), label = "Deaths") %>%
dyOptions(drawGrid = input$showgrid)
})
})
output$from <- renderText({
req(input$dygraph_date_window[[1]])
})
output$to <- renderText({
req(input$dygraph_date_window[[2]])
})
output$clicked <- renderText({
strftime(req(input$dygraph_click$x))
})
output$point <- renderText({
paste0('X = ', strftime(req(input$dygraph_click$x_closest_point)),
'; Y = ', req(input$dygraph_click$y_closest_point))
})
})
shinyApp(ui, server)
heart_range
library(dygraphs)
library(datasets)
library(shiny)
library(xts)
library(leaflet)
hr_max <- 190
hr_lit <- c(124, 146, 162)
ui <- shinyUI(fluidPage(
sidebarLayout(
sidebarPanel(
checkboxInput("showgrid", label = "Show Grid", value = TRUE),
hr(),
div(strong("From: "), textOutput("from", inline = TRUE)),
div(strong("To: "), textOutput("to", inline = TRUE)),
div(strong("Date clicked: "), textOutput("clicked", inline = TRUE)),
br(),
helpText("Click and drag to zoom in (double click to zoom back out).")
),
mainPanel(
dygraphOutput("dygraph"),
leafletOutput('trackmap')
)
)
))
server <- shinyServer(function(input, output) {
n <- track_raw %>% nrow
global <- reactiveValues(track = track_raw, keep_time = rep(TRUE, n), heart_range = 1:n)
observeEvent(input$trackmap_bounds, {
global$update <- TRUE
isolate({
bounds <- req(input$trackmap_bounds)
global$keep_time <- track_raw$lat < bounds$north & track_raw$lat > bounds$south &
track_raw$lon < bounds$east & track_raw$lon > bounds$west
})
})
observeEvent(global$update_from_hr, {
require(global$update_from_hr == TRUE)
print("GOOOOOOO2")
from = req(input$dygraph_date_window[[1]])
to = req(input$dygraph_date_window[[2]])
from <- strptime(from, "%Y-%m-%dT%H:%M:%OSZ") + 2*3600
to <- strptime(to, "%Y-%m-%dT%H:%M:%OSZ") + 2*3600
start <- which.min(abs(track_raw$time - from))
end <- which.min(abs(track_raw$time - to))
global$heart_range <- start:end
global$update_from_hr <- FALSE
})
observeEvent(input$dygraph_date_window, {
print("GOOOOOOO")
global$update_from_hr <- TRUE
})
output$trackmap = renderLeaflet({
global$heart_range
print("HEEERE")
isolate({
global$track <- track_raw[global$heart_range, ]
lon <- global$track$lon %>% range
lat <- global$track$lat %>% range
m <- leaflet() %>% addTiles()
m %>% fitBounds(lon[1], lat[1], lon[2], lat[2]) %>%
addPolylines(data = global$track, lng = ~lon, lat = ~lat)
})
})
output$dygraph <- renderDygraph({
isolate({
global$track <- track_raw[global$keep_time, ]
global$track$speed %<>% as.numeric
df <- data.frame(x = global$track$time, y = global$track$speed)
qxts <- xts(as.numeric(global$track[, 6]), order.by = global$track$time)
dygraph(qxts, main = "Predicted Deaths/Month") %>%
dyLimit(hr_lit[1], color = "blue") %>%
dyLimit(hr_lit[2], color = "blue") %>%
dyLimit(hr_lit[3], color = "blue") %>%
#dySeries(c("lwr", "fit", "upr"), label = "Deaths") %>%
dyOptions(drawGrid = input$showgrid)
})
})
output$from <- renderText({
req(input$dygraph_date_window[[1]])
})
output$to <- renderText({
req(input$dygraph_date_window[[2]])
})
output$clicked <- renderText({
strftime(req(input$dygraph_click$x))
})
output$point <- renderText({
paste0('X = ', strftime(req(input$dygraph_click$x_closest_point)),
'; Y = ', req(input$dygraph_click$y_closest_point))
})
})
shinyApp(ui, server)
library(dygraphs)
library(datasets)
library(shiny)
library(xts)
library(leaflet)
hr_max <- 190
hr_lit <- c(124, 146, 162)
ui <- shinyUI(fluidPage(
sidebarLayout(
sidebarPanel(
checkboxInput("showgrid", label = "Show Grid", value = TRUE),
hr(),
div(strong("From: "), textOutput("from", inline = TRUE)),
div(strong("To: "), textOutput("to", inline = TRUE)),
div(strong("Date clicked: "), textOutput("clicked", inline = TRUE)),
br(),
helpText("Click and drag to zoom in (double click to zoom back out).")
),
mainPanel(
dygraphOutput("dygraph"),
leafletOutput('trackmap')
)
)
))
server <- shinyServer(function(input, output) {
n <- track_raw %>% nrow
global <- reactiveValues(track = track_raw, keep_time = rep(TRUE, n), heart_range = 1:n)
observeEvent(input$trackmap_bounds, {
global$update_from_map <- TRUE
})
observeEvent(global$update_from_map, {
require(update_from_map == TRUE)
bounds <- req(input$trackmap_bounds)
global$keep_time <- track_raw$lat < bounds$north & track_raw$lat > bounds$south &
track_raw$lon < bounds$east & track_raw$lon > bounds$west
global$update_from_map <- FALSE
})
observeEvent(global$update_from_hr, {
require(global$update_from_hr == TRUE)
from = req(input$dygraph_date_window[[1]])
to = req(input$dygraph_date_window[[2]])
from <- strptime(from, "%Y-%m-%dT%H:%M:%OSZ") + 2*3600
to <- strptime(to, "%Y-%m-%dT%H:%M:%OSZ") + 2*3600
start <- which.min(abs(track_raw$time - from))
end <- which.min(abs(track_raw$time - to))
global$heart_range <- start:end
global$update_from_hr <- FALSE
})
observeEvent(input$dygraph_date_window, {
global$update_from_hr <- TRUE
})
output$trackmap = renderLeaflet({
global$heart_range
isolate({
global$track <- track_raw[global$heart_range, ]
lon <- global$track$lon %>% range
lat <- global$track$lat %>% range
m <- leaflet() %>% addTiles()
m %>% fitBounds(lon[1], lat[1], lon[2], lat[2]) %>%
addPolylines(data = global$track, lng = ~lon, lat = ~lat)
})
})
output$dygraph <- renderDygraph({
isolate({
global$track <- track_raw[global$keep_time, ]
global$track$speed %<>% as.numeric
df <- data.frame(x = global$track$time, y = global$track$speed)
qxts <- xts(as.numeric(global$track[, 6]), order.by = global$track$time)
dygraph(qxts, main = "Predicted Deaths/Month") %>%
dyLimit(hr_lit[1], color = "blue") %>%
dyLimit(hr_lit[2], color = "blue") %>%
dyLimit(hr_lit[3], color = "blue") %>%
#dySeries(c("lwr", "fit", "upr"), label = "Deaths") %>%
dyOptions(drawGrid = input$showgrid)
})
})
output$from <- renderText({
req(input$dygraph_date_window[[1]])
})
output$to <- renderText({
req(input$dygraph_date_window[[2]])
})
output$clicked <- renderText({
strftime(req(input$dygraph_click$x))
})
output$point <- renderText({
paste0('X = ', strftime(req(input$dygraph_click$x_closest_point)),
'; Y = ', req(input$dygraph_click$y_closest_point))
})
})
shinyApp(ui, server)
require
shiny::req
library(dygraphs)
library(datasets)
library(shiny)
library(xts)
library(leaflet)
hr_max <- 190
hr_lit <- c(124, 146, 162)
ui <- shinyUI(fluidPage(
sidebarLayout(
sidebarPanel(
checkboxInput("showgrid", label = "Show Grid", value = TRUE),
hr(),
div(strong("From: "), textOutput("from", inline = TRUE)),
div(strong("To: "), textOutput("to", inline = TRUE)),
div(strong("Date clicked: "), textOutput("clicked", inline = TRUE)),
br(),
helpText("Click and drag to zoom in (double click to zoom back out).")
),
mainPanel(
dygraphOutput("dygraph"),
leafletOutput('trackmap')
)
)
))
server <- shinyServer(function(input, output) {
n <- track_raw %>% nrow
global <- reactiveValues(track = track_raw, keep_time = rep(TRUE, n), heart_range = 1:n)
observeEvent(input$trackmap_bounds, {
global$update_from_map <- TRUE
})
observeEvent(global$update_from_map, {
req(update_from_map == TRUE)
bounds <- req(input$trackmap_bounds)
global$keep_time <- track_raw$lat < bounds$north & track_raw$lat > bounds$south &
track_raw$lon < bounds$east & track_raw$lon > bounds$west
global$update_from_map <- FALSE
})
observeEvent(global$update_from_hr, {
req(global$update_from_hr == TRUE)
from = req(input$dygraph_date_window[[1]])
to = req(input$dygraph_date_window[[2]])
from <- strptime(from, "%Y-%m-%dT%H:%M:%OSZ") + 2*3600
to <- strptime(to, "%Y-%m-%dT%H:%M:%OSZ") + 2*3600
start <- which.min(abs(track_raw$time - from))
end <- which.min(abs(track_raw$time - to))
global$heart_range <- start:end
global$update_from_hr <- FALSE
})
observeEvent(input$dygraph_date_window, {
global$update_from_hr <- TRUE
})
output$trackmap = renderLeaflet({
global$heart_range
isolate({
global$track <- track_raw[global$heart_range, ]
lon <- global$track$lon %>% range
lat <- global$track$lat %>% range
m <- leaflet() %>% addTiles()
m %>% fitBounds(lon[1], lat[1], lon[2], lat[2]) %>%
addPolylines(data = global$track, lng = ~lon, lat = ~lat)
})
})
output$dygraph <- renderDygraph({
global$keep_time
isolate({
global$track <- track_raw[global$keep_time, ]
global$track$speed %<>% as.numeric
df <- data.frame(x = global$track$time, y = global$track$speed)
qxts <- xts(as.numeric(global$track[, 6]), order.by = global$track$time)
dygraph(qxts, main = "Predicted Deaths/Month") %>%
dyLimit(hr_lit[1], color = "blue") %>%
dyLimit(hr_lit[2], color = "blue") %>%
dyLimit(hr_lit[3], color = "blue") %>%
#dySeries(c("lwr", "fit", "upr"), label = "Deaths") %>%
dyOptions(drawGrid = input$showgrid)
})
})
output$from <- renderText({
req(input$dygraph_date_window[[1]])
})
output$to <- renderText({
req(input$dygraph_date_window[[2]])
})
output$clicked <- renderText({
strftime(req(input$dygraph_click$x))
})
output$point <- renderText({
paste0('X = ', strftime(req(input$dygraph_click$x_closest_point)),
'; Y = ', req(input$dygraph_click$y_closest_point))
})
})
shinyApp(ui, server)
library(dygraphs)
library(datasets)
library(shiny)
library(xts)
library(leaflet)
hr_max <- 190
hr_lit <- c(124, 146, 162)
ui <- shinyUI(fluidPage(
sidebarLayout(
sidebarPanel(
checkboxInput("showgrid", label = "Show Grid", value = TRUE),
hr(),
div(strong("From: "), textOutput("from", inline = TRUE)),
div(strong("To: "), textOutput("to", inline = TRUE)),
div(strong("Date clicked: "), textOutput("clicked", inline = TRUE)),
br(),
helpText("Click and drag to zoom in (double click to zoom back out).")
),
mainPanel(
dygraphOutput("dygraph"),
leafletOutput('trackmap')
)
)
))
server <- shinyServer(function(input, output) {
n <- track_raw %>% nrow
global <- reactiveValues(track = track_raw, keep_time = rep(TRUE, n), heart_range = 1:n,
update_from_map = FALSE)
observeEvent(input$trackmap_bounds, {
global$update_from_map <- TRUE
})
observeEvent(global$update_from_map, {
req(update_from_map == TRUE)
bounds <- req(input$trackmap_bounds)
global$keep_time <- track_raw$lat < bounds$north & track_raw$lat > bounds$south &
track_raw$lon < bounds$east & track_raw$lon > bounds$west
global$update_from_map <- FALSE
})
observeEvent(global$update_from_hr, {
req(global$update_from_hr == TRUE)
from = req(input$dygraph_date_window[[1]])
to = req(input$dygraph_date_window[[2]])
from <- strptime(from, "%Y-%m-%dT%H:%M:%OSZ") + 2*3600
to <- strptime(to, "%Y-%m-%dT%H:%M:%OSZ") + 2*3600
start <- which.min(abs(track_raw$time - from))
end <- which.min(abs(track_raw$time - to))
global$heart_range <- start:end
global$update_from_hr <- FALSE
})
observeEvent(input$dygraph_date_window, {
global$update_from_hr <- TRUE
})
output$trackmap = renderLeaflet({
global$heart_range
isolate({
global$track <- track_raw[global$heart_range, ]
lon <- global$track$lon %>% range
lat <- global$track$lat %>% range
m <- leaflet() %>% addTiles()
m %>% fitBounds(lon[1], lat[1], lon[2], lat[2]) %>%
addPolylines(data = global$track, lng = ~lon, lat = ~lat)
})
})
output$dygraph <- renderDygraph({
global$keep_time
isolate({
global$track <- track_raw[global$keep_time, ]
global$track$speed %<>% as.numeric
df <- data.frame(x = global$track$time, y = global$track$speed)
qxts <- xts(as.numeric(global$track[, 6]), order.by = global$track$time)
dygraph(qxts, main = "Predicted Deaths/Month") %>%
dyLimit(hr_lit[1], color = "blue") %>%
dyLimit(hr_lit[2], color = "blue") %>%
dyLimit(hr_lit[3], color = "blue") %>%
#dySeries(c("lwr", "fit", "upr"), label = "Deaths") %>%
dyOptions(drawGrid = input$showgrid)
})
})
output$from <- renderText({
req(input$dygraph_date_window[[1]])
})
output$to <- renderText({
req(input$dygraph_date_window[[2]])
})
output$clicked <- renderText({
strftime(req(input$dygraph_click$x))
})
output$point <- renderText({
paste0('X = ', strftime(req(input$dygraph_click$x_closest_point)),
'; Y = ', req(input$dygraph_click$y_closest_point))
})
})
shinyApp(ui, server)
library(dygraphs)
library(datasets)
library(shiny)
library(xts)
library(leaflet)
hr_max <- 190
hr_lit <- c(124, 146, 162)
ui <- shinyUI(fluidPage(
sidebarLayout(
sidebarPanel(
checkboxInput("showgrid", label = "Show Grid", value = TRUE),
hr(),
div(strong("From: "), textOutput("from", inline = TRUE)),
div(strong("To: "), textOutput("to", inline = TRUE)),
div(strong("Date clicked: "), textOutput("clicked", inline = TRUE)),
br(),
helpText("Click and drag to zoom in (double click to zoom back out).")
),
mainPanel(
dygraphOutput("dygraph"),
leafletOutput('trackmap')
)
)
))
server <- shinyServer(function(input, output) {
n <- track_raw %>% nrow
global <- reactiveValues(track = track_raw, keep_time = rep(TRUE, n), heart_range = 1:n,
update_from_map = FALSE)
observeEvent(input$trackmap_bounds, {
global$update_from_map <- TRUE
})
observeEvent(global$update_from_map, {
req(global$update_from_map == TRUE)
bounds <- req(input$trackmap_bounds)
global$keep_time <- track_raw$lat < bounds$north & track_raw$lat > bounds$south &
track_raw$lon < bounds$east & track_raw$lon > bounds$west
global$update_from_map <- FALSE
})
observeEvent(global$update_from_hr, {
req(global$update_from_hr == TRUE)
from = req(input$dygraph_date_window[[1]])
to = req(input$dygraph_date_window[[2]])
from <- strptime(from, "%Y-%m-%dT%H:%M:%OSZ") + 2*3600
to <- strptime(to, "%Y-%m-%dT%H:%M:%OSZ") + 2*3600
start <- which.min(abs(track_raw$time - from))
end <- which.min(abs(track_raw$time - to))
global$heart_range <- start:end
global$update_from_hr <- FALSE
})
observeEvent(input$dygraph_date_window, {
global$update_from_hr <- TRUE
})
output$trackmap = renderLeaflet({
global$heart_range
isolate({
global$track <- track_raw[global$heart_range, ]
lon <- global$track$lon %>% range
lat <- global$track$lat %>% range
m <- leaflet() %>% addTiles()
m %>% fitBounds(lon[1], lat[1], lon[2], lat[2]) %>%
addPolylines(data = global$track, lng = ~lon, lat = ~lat)
})
})
output$dygraph <- renderDygraph({
global$keep_time
isolate({
global$track <- track_raw[global$keep_time, ]
global$track$speed %<>% as.numeric
df <- data.frame(x = global$track$time, y = global$track$speed)
qxts <- xts(as.numeric(global$track[, 6]), order.by = global$track$time)
dygraph(qxts, main = "Predicted Deaths/Month") %>%
dyLimit(hr_lit[1], color = "blue") %>%
dyLimit(hr_lit[2], color = "blue") %>%
dyLimit(hr_lit[3], color = "blue") %>%
#dySeries(c("lwr", "fit", "upr"), label = "Deaths") %>%
dyOptions(drawGrid = input$showgrid)
})
})
output$from <- renderText({
req(input$dygraph_date_window[[1]])
})
output$to <- renderText({
req(input$dygraph_date_window[[2]])
})
output$clicked <- renderText({
strftime(req(input$dygraph_click$x))
})
output$point <- renderText({
paste0('X = ', strftime(req(input$dygraph_click$x_closest_point)),
'; Y = ', req(input$dygraph_click$y_closest_point))
})
})
shinyApp(ui, server)
